(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{453:function(t,s,a){"use strict";a.r(s);var n=a(14),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"概览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概览"}},[t._v("#")]),t._v(" 概览")]),t._v(" "),a("p",[t._v("String 被声明为 final，因此它是不可被继承的。")]),t._v(" "),a("p",[t._v("内部使用 char 数组存储数据，该数组被声明为 final ，这意味着 value 数组初始化后就不能引用其他数组。并且 String 内部没有改变 value 数组的方法，因此可以保证 String 不可变。")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[a("span",{pre:!0,attrs:{class:"token namespace"}},[t._v("java"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("io"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")])]),t._v("Serializable")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparable")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CharSequence")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** The value is used for character storage. */")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("h2",{attrs:{id:"不可变的好处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不可变的好处"}},[t._v("#")]),t._v(" 不可变的好处")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("可以缓存 hash 值")]),t._v(" "),a("p",[t._v("因为 String 的 hash 值经常被使用，例如使用 String 作为 HashMap 的 key。不变的特性可以使得 hash 值也不可变，因此只需要进行一次计算。")])]),t._v(" "),a("li",[a("p",[t._v("String Pool 的需要")]),t._v(" "),a("p",[t._v("如果一个 String 对象已经被创建过，那么就会从 String Pool 中取得引用。只有 String 是不可变的，才可能使用 String Pool。")])]),t._v(" "),a("li",[a("p",[t._v("安全性")]),t._v(" "),a("p",[t._v("String 经常作为参数，String 不可变性可以保证参数不可变。")])]),t._v(" "),a("li",[a("p",[t._v("线程安全")]),t._v(" "),a("p",[t._v("String 不可变性天生具备线程安全，可以在多个线程中安全使用。")])])]),t._v(" "),a("h2",{attrs:{id:"string-stringbuffer-and-stringbuilder"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-stringbuffer-and-stringbuilder"}},[t._v("#")]),t._v(" String, StringBuffer and StringBuilder")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("可变性")]),t._v(" "),a("p",[t._v("String 不可变")]),t._v(" "),a("p",[t._v("StringBuffer 和 StringBuilder 可变")])]),t._v(" "),a("li",[a("p",[t._v("线程安全")]),t._v(" "),a("p",[t._v("String 是不可变的，所以是线程安全")]),t._v(" "),a("p",[t._v("StringBuilder 不是线程安全")]),t._v(" "),a("p",[t._v("StringBuffer 是线程安全")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("AbstractStringBuilder  是  StringBuilder  与  StringBuffer 的公共父类，定义了一些字符串的基本操作，如  expandCapacity  、 append 、insert、indexOf  等公共方法。")]),t._v(" "),a("p",[t._v("StringBuffer  对方法加了同步锁或者对调用的方法加了同步锁，所以是线程安全的。")]),t._v(" "),a("p",[t._v("StringBuilder  并没有对方法进行加同步锁，所以是非线程安全的。")])])]),t._v(" "),a("li",[a("p",[t._v("性能")]),t._v(" "),a("p",[t._v("每次对 String 类型进行改变，都会生成一个新的 String 对象，然后把指针指向新的 String 对象")]),t._v(" "),a("p",[t._v("StringBuffer 每次都会对 StringBuffer 对象本身进行操作，而不是生成新的对象并改变对象引用")]),t._v(" "),a("p",[t._v("相同情况下，使用 StringBuilder 相比 StringBuffer 仅能获得10%~15%左右的性能提升，但要冒着多线程不安全的风险")])])]),t._v(" "),a("p",[t._v("对于三者使用的总结：")]),t._v(" "),a("ul",[a("li",[t._v("操作少量数据：适用 String")]),t._v(" "),a("li",[t._v("单线程操作字符串缓冲区下操作大量数据：适用 StringBuilder")]),t._v(" "),a("li",[t._v("多线程操作字符串缓冲区下操作大量数据：适用 StringBuffer")])]),t._v(" "),a("h2",{attrs:{id:"string-intern"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#string-intern"}},[t._v("#")]),t._v(" String.intern()")]),t._v(" "),a("p",[t._v("使用 String.intern() 可以保证相同内容的字符串变量引用同一的内存对象。")]),t._v(" "),a("p",[t._v("下面示例中，s1 和 s2 采用 new String() 的方式新建了两个不同对象，而 s3 是通过 s1.intern() 方法取得一个对象引用。intern() 首先把 s1 引用的对象放到 String Pool(字符串常量池)中，然后返回这个对象引用。因此 s3 和 s1 引用的是同一个字符串常量池的对象。")]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaa"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaa"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("           "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("intern")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("intern")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v('如果是采用 "bbb" 这种使用双引号的形式创建字符串实例，会自动地将新建的对象放入 String Pool 中。')]),t._v(" "),a("div",{staticClass:"language-java line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bbb"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s5 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"bbb"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s4 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" s5"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h2",{attrs:{id:"判断方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#判断方法"}},[t._v("#")]),t._v(" 判断方法")]),t._v(" "),a("p",[t._v("比较字符串内容是否相同，区分大小写：boolean equals(Object obj)")]),t._v(" "),a("p",[t._v("比较字符串的内容是否相同，忽略大小写：boolean equalsIgnoreCase(String str)")]),t._v(" "),a("p",[t._v("判断大字符串是否包含小字符串：boolean contains(String str)")]),t._v(" "),a("p",[t._v("判断字符串是都以某个指定的字符串开头：boolean startsWith(String str)")]),t._v(" "),a("p",[t._v("判断字符串是都以某个指定的字符串结尾：boolean endsWith(String str)")]),t._v(" "),a("p",[t._v("判断字符串是否为空：boolean isEmpty()")]),t._v(" "),a("h2",{attrs:{id:"获取方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#获取方法"}},[t._v("#")]),t._v(" 获取方法")]),t._v(" "),a("p",[t._v("获取字符串的长度：public int length()")]),t._v(" "),a("p",[t._v("获取指定索引位置的字符 ： public char charAt(int index)")]),t._v(" "),a("p",[t._v("获取指定字符在此字符串中第一次出现处的索引：public int indexOf(int ch)")]),t._v(" "),a("p",[t._v("返回指定字符在此字符串中从指定位置后第一次出现处的索引：public int indexOf(int ch, int fromIndex)")]),t._v(" "),a("p",[t._v("返回指定字符串在此字符串中第一次出现处的索引：public int indexOf(String str)")]),t._v(" "),a("p",[t._v("返回指定字符串在此字符串中从指定位置后第一次出现处的索引：public int indexOf(String str, int fromIndex)")]),t._v(" "),a("p",[t._v("获取子串：")]),t._v(" "),a("ul",[a("li",[t._v("public String substring(int start)")]),t._v(" "),a("li",[t._v("public String substring(int start, int end)")])]),t._v(" "),a("p",[t._v("替换：")]),t._v(" "),a("ul",[a("li",[t._v("String replace(char old, char new)")]),t._v(" "),a("li",[t._v("String replace(String old, String new)")])]),t._v(" "),a("h2",{attrs:{id:"其他常用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他常用方法"}},[t._v("#")]),t._v(" 其他常用方法")]),t._v(" "),a("p",[t._v("去除两端空格：String trim()")]),t._v(" "),a("p",[t._v("按字典顺序比较：")]),t._v(" "),a("ul",[a("li",[t._v("int compareTo(String str)")]),t._v(" "),a("li",[t._v("int compareToIgnoreCase(String str)")])]),t._v(" "),a("p",[t._v("转大小写：")]),t._v(" "),a("ul",[a("li",[t._v("public String toUpperCase()")]),t._v(" "),a("li",[t._v("public String toLowerCase()")])]),t._v(" "),a("p",[t._v("把字符串拼接：public String concat(String str)")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.pdai.tech/md/java/basic/java-basic-lan-basic.html#string",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考链接1"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.runoob.com/java/java-string.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考链接2"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=r.exports}}]);