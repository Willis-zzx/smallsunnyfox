(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{471:function(e,t,v){"use strict";v.r(t);var _=v(14),a=Object(_.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h2",{attrs:{id:"arraylist和vector有什么区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#arraylist和vector有什么区别"}},[e._v("#")]),e._v(" "),v("strong",[e._v("ArrayList和Vector有什么区别？")])]),e._v(" "),v("ul",[v("li",[v("code",[e._v("ArrayList")]),e._v("是List的主要实现类，底层使用"),v("code",[e._v("Object[]")]),e._v("存储，适用于频繁的查找工作，线程不安全")]),e._v(" "),v("li",[v("code",[e._v("Vector")]),e._v("是List的古老实现类，底层使用"),v("code",[e._v("Object[]")]),e._v("存储，线程安全")])]),e._v(" "),v("h2",{attrs:{id:"arraylist与linkedlist有什么区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#arraylist与linkedlist有什么区别"}},[e._v("#")]),e._v(" "),v("strong",[e._v("ArrayList与LinkedList有什么区别？")])]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("是否保证线程安全：")]),v("code",[e._v("ArrayList")]),e._v("和"),v("code",[e._v("LinkedList")]),e._v("都是不同步的，也就是不保证线程安全。")])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("底层数据结构：")]),v("code",[e._v("ArrayList")]),e._v("底层使用的是Object数组；"),v("code",[e._v("LinkedList")]),e._v("底层使用的是双向链表。")])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("插入和删除是否受元素位置的影响：")])]),e._v(" "),v("ul",[v("li",[v("code",[e._v("ArrayList")]),e._v("采用数组存储，所以插入和删除元素的时间复杂度受元素的位置影响。\n"),v("ul",[v("li",[e._v("比如：执行"),v("code",[e._v("add(E e)")]),e._v("方法的时候，ArrayList会默认将指定的元素追加到此处列表的末尾，这种情况时间复杂度为O(1) ；")]),e._v(" "),v("li",[e._v("比如：如果要在指定位置 i 插入和删除元素的话（ "),v("code",[e._v("add( int index , E element )")]),e._v("  ），时间复杂度就为"),v("code",[e._v("O(n-i)")]),e._v("，因为执行上诉操作时，集合中第 i 和第 i 个元素之后的（n-i）个元素都需要向前或者往后移动一位。")])])]),e._v(" "),v("li",[v("code",[e._v("LinkedList")]),e._v("采用链表存储\n"),v("ul",[v("li",[e._v("如果是在头尾插入或者删除元素不受元素位置影响（ "),v("code",[e._v("add(E e)")]),e._v("、"),v("code",[e._v("addFirst(E e)")]),e._v("、"),v("code",[e._v("addLast(E e)")]),e._v("、"),v("code",[e._v("removeFirst()")]),e._v(" 、 "),v("code",[e._v("removeLast()")]),e._v(" ），近似O(1)")]),e._v(" "),v("li",[e._v("如果是要在指定位置 i 插入和删除元素的话（ "),v("code",[e._v("add(int index, E element)")]),e._v("，"),v("code",[e._v("remove(Object o)")]),e._v(" ）时间复杂度近似为O(n)，因为需要先移动到指定位置再插入")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("是否支持快速随机访问：")]),v("code",[e._v("LinkedList")]),e._v("不支持高效的随机元素访问，而"),v("code",[e._v("ArrayList")]),e._v("支持。（ "),v("code",[e._v("get(int index）")]),e._v("方法）")])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("内存空间占用：")])]),e._v(" "),v("ul",[v("li",[v("code",[e._v("ArrayList")]),e._v("的空间浪费主要体现在list列表的结尾会预留一定的容量空间")]),e._v(" "),v("li",[v("code",[e._v("LinkedList")]),e._v("的空间浪费主要体现在他的每一个元素都需要消耗比ArrayList更多的空间，因为"),v("code",[e._v("LinkedList")]),e._v("采用链表存储，要存放直接后继和直接前驱以及数据")])])])]),e._v(" "),v("h2",{attrs:{id:"comparable-和-comparator-有什么区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#comparable-和-comparator-有什么区别"}},[e._v("#")]),e._v(" comparable 和 comparator 有什么区别？")]),e._v(" "),v("p",[v("code",[e._v("comparable")]),e._v("接口出自"),v("code",[e._v("java.lang")]),e._v("包，它有一个"),v("code",[e._v("compareTo(Object obj)")]),e._v("方法用于排序")]),e._v(" "),v("p",[v("code",[e._v("comparator")]),e._v("接口出自"),v("code",[e._v("java.util")]),e._v("包，它有一个compare(Object obj1 ,  Object obj2 )方法用于排序")]),e._v(" "),v("h2",{attrs:{id:"hashset-、linkedhashset-、treeset三者有什么区别"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#hashset-、linkedhashset-、treeset三者有什么区别"}},[e._v("#")]),e._v(" "),v("strong",[e._v("HashSet 、LinkedHashSet 、TreeSet三者有什么区别")])]),e._v(" "),v("ul",[v("li",[v("code",[e._v("HashSet")]),e._v("是"),v("code",[e._v("set")]),e._v("接口的主要实现类，"),v("code",[e._v("HashSet")]),e._v("的底层是"),v("code",[e._v("HashMap")]),e._v("，线程不安全，可以存储null值")]),e._v(" "),v("li",[v("code",[e._v("LinkedHashSet")]),e._v("是"),v("code",[e._v("HashSet")]),e._v("的子类，能够按照添加的顺序遍历")]),e._v(" "),v("li",[v("code",[e._v("TreeSet")]),e._v("底层采用红黑树，元素是有序的，排序的方式有自然排序和定制排序")])]),e._v(" "),v("h2",{attrs:{id:"collection-子接口-queue"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#collection-子接口-queue"}},[e._v("#")]),e._v(" Collection 子接口 Queue")])])}),[],!1,null,null,null);t.default=a.exports}}]);