(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{472:function(a,s,t){"use strict";t.r(s);var n=t(14),e=Object(n.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h2",{attrs:{id:"hashmap和hashtable的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashmap和hashtable的区别"}},[a._v("#")]),a._v(" HashMap和Hashtable的区别")]),a._v(" "),t("ol",[t("li",[t("p",[t("strong",[a._v("线程是否安全")]),a._v("："),t("code",[a._v("HashMap")]),a._v("是非线程安全的，"),t("code",[a._v("HashTable")]),a._v("是线程安全的。因为"),t("code",[a._v("HashTable")]),a._v("内部的方法基本都经过"),t("code",[a._v("synchronized")]),a._v("修饰过（如果需要保证线程安全，可以使用"),t("code",[a._v("ConcurrentHashMap")]),a._v("）")])]),a._v(" "),t("li",[t("p",[a._v("**效率：**因为线程安全问题，"),t("code",[a._v("HashMap")]),a._v("比"),t("code",[a._v("HashTable")]),a._v("效率高一些。"),t("code",[a._v("HashTable")]),a._v("基本被淘汰，不使用")])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("对 Null key 和 Null value 的支持：")])]),a._v(" "),t("ul",[t("li",[t("code",[a._v("HashMap")]),a._v("可以存储 null 的 key 和 value ，但 null 作为键只能有一个，null 作为值可以有多个")]),a._v(" "),t("li",[t("code",[a._v("HashTable")]),a._v("不允许有 null 的 key 和 value ，否则会抛出"),t("code",[a._v("NullPointerException")]),a._v("异常")])])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("初始容量大小和每次扩容大小的不同：")])]),a._v(" "),t("ul",[t("li",[a._v("创建时如果不指定容量初始值，"),t("code",[a._v("Hashtable")]),a._v(" 默认的初始大小为 11，之后每次扩充，容量变为原来的 2n+1。"),t("code",[a._v("HashMap")]),a._v(" 默认的初始化大小为 16。之后每次扩充，容量变为原来的 2 倍。")]),a._v(" "),t("li",[a._v("创建时如果给定了容量初始值，那么 "),t("code",[a._v("Hashtable")]),a._v(" 会直接使用你给定的大小，而 "),t("code",[a._v("HashMap")]),a._v(" 会将其扩充为 2 的幂次方大小（"),t("code",[a._v("HashMap")]),a._v(" 中的"),t("code",[a._v("tableSizeFor()")]),a._v("方法保证，下面给出了源代码）。也就是说 "),t("code",[a._v("HashMap")]),a._v(" 总是使用 2 的幂作为哈希表的大小,后面会介绍到为什么是 2 的幂次方。")])])]),a._v(" "),t("li",[t("p",[t("strong",[a._v("底层数据结构：")]),a._v(" JDK1.8 以后的 "),t("code",[a._v("HashMap")]),a._v(" 在解决哈希冲突时有了较大的变化，当链表长度大于阈值（默认为 8）（将链表转换成红黑树前会判断，如果当前数组的长度小于 64，那么会选择先进行数组扩容，而不是转换为红黑树）时，将链表转化为红黑树，以减少搜索时间。"),t("code",[a._v("Hashtable")]),a._v(" 没有这样的机制。")])])]),a._v(" "),t("p",[t("code",[a._v("HashMap")]),a._v("中带有初始容量的构造函数：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HashMap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" initialCapacity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("float")]),a._v(" loadFactor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("initialCapacity "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throw")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("IllegalArgumentException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Illegal initial capacity: "')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v("\n                                               initialCapacity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("initialCapacity "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" MAXIMUM_CAPACITY"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n            initialCapacity "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" MAXIMUM_CAPACITY"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("loadFactor "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("||")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Float")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("isNaN")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("loadFactor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n            "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("throw")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("IllegalArgumentException")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"Illegal load factor: "')]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v("\n                                               loadFactor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("loadFactor "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" loadFactor"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("threshold "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("tableSizeFor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("initialCapacity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n     "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("HashMap")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" initialCapacity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("this")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("initialCapacity"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" DEFAULT_LOAD_FACTOR"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br")])]),t("p",[a._v("下面这个方法保证了"),t("code",[a._v("HashMaop")]),a._v("总是使用2的幂作为哈希表的大小：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("    "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n     * Returns a power of two size for the given target capacity.\n     */")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("final")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("tableSizeFor")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" cap"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" n "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" cap "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        n "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|=")]),a._v(" n "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        n "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|=")]),a._v(" n "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        n "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|=")]),a._v(" n "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("4")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        n "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|=")]),a._v(" n "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("8")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        n "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("|=")]),a._v(" n "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">>>")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("16")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("n "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("n "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">=")]),a._v(" MAXIMUM_CAPACITY"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("?")]),a._v(" MAXIMUM_CAPACITY "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v(":")]),a._v(" n "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("+")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br")])]),t("h2",{attrs:{id:"hashmap-和-hashset-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-和-hashset-的区别"}},[a._v("#")]),a._v(" HashMap 和 HashSet 的区别")]),a._v(" "),t("p",[t("code",[a._v("HashSet")]),a._v("底层基于"),t("code",[a._v("HashMap")]),a._v("实现，除了"),t("code",[a._v("clone()")]),a._v("、"),t("code",[a._v("writeObject()")]),a._v("、"),t("code",[a._v("readObject()")]),a._v("是自己实现的，其余方法都是直接调用"),t("code",[a._v("HashMap")]),a._v("中的方法")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",[t("code",[a._v("HashMap")])]),a._v(" "),t("th",[t("code",[a._v("HashSet")])])])]),a._v(" "),t("tbody",[t("tr",[t("td",[a._v("实现了 "),t("code",[a._v("Map")]),a._v(" 接口")]),a._v(" "),t("td",[a._v("实现 "),t("code",[a._v("Set")]),a._v(" 接口")])]),a._v(" "),t("tr",[t("td",[a._v("存储键值对")]),a._v(" "),t("td",[a._v("仅存储对象")])]),a._v(" "),t("tr",[t("td",[a._v("调用 "),t("code",[a._v("put()")]),a._v("向 map 中添加元素")]),a._v(" "),t("td",[a._v("调用 "),t("code",[a._v("add()")]),a._v("方法向 "),t("code",[a._v("Set")]),a._v(" 中添加元素")])]),a._v(" "),t("tr",[t("td",[t("code",[a._v("HashMap")]),a._v(" 使用键（Key）计算 "),t("code",[a._v("hashcode")])]),a._v(" "),t("td",[t("code",[a._v("HashSet")]),a._v(" 使用成员对象来计算 "),t("code",[a._v("hashcode")]),a._v(" 值，对于两个对象来说 "),t("code",[a._v("hashcode")]),a._v(" 可能相同，所以"),t("code",[a._v("equals()")]),a._v("方法用来判断对象的相等性")])])])]),a._v(" "),t("h2",{attrs:{id:"hashmap-和-treemap-的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-和-treemap-的区别"}},[a._v("#")]),a._v(" HashMap 和 TreeMap 的区别")]),a._v(" "),t("p",[t("code",[a._v("HashMap")]),a._v("和"),t("code",[a._v("TreeMap")]),a._v("都继承自"),t("code",[a._v("AbstractMap")])]),a._v(" "),t("p",[t("code",[a._v("TreeMap")]),a._v("还实现了"),t("code",[a._v("NavigableMap")]),a._v("接口和"),t("code",[a._v("SortedMap")]),a._v(" 接口。")]),a._v(" "),t("ul",[t("li",[t("p",[a._v("实现"),t("code",[a._v("NavigableMap")]),a._v("接口让"),t("code",[a._v("TreeMap")]),a._v("有了对集合内元素的搜索能力")])]),a._v(" "),t("li",[t("p",[a._v("实现"),t("code",[a._v("SortMap")]),a._v("接口让"),t("code",[a._v("TreeMap")]),a._v("有了对集合中元素根据键排序的能力。默认是按key的升序排序")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);