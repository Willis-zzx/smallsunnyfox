(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{482:function(r,t,i){"use strict";i.r(t);var e=i(14),n=Object(e.a)({},(function(){var r=this,t=r.$createElement,i=r._self._c||t;return i("ContentSlotsDistributor",{attrs:{"slot-key":r.$parent.slotKey}},[i("h2",{attrs:{id:"什么是-spring"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#什么是-spring"}},[r._v("#")]),r._v(" 什么是 Spring？")]),r._v(" "),i("div",{staticClass:"custom-block tip"},[i("p",{staticClass:"custom-block-title"},[r._v("提示")]),r._v(" "),i("p",[r._v("首先，Spring 是什么？它是怎么诞生的？它的诞生是为了解决什么问题？")])]),r._v(" "),i("h3",{attrs:{id:"spring-的起源"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#spring-的起源"}},[r._v("#")]),r._v(" Spring 的起源")]),r._v(" "),i("p",[r._v("要谈 Spring 的历史，就要先谈 JE22。JE22 应用程序的广泛实现是在1999年和2000年开始的，它的出现带来了诸如事务管理之类的"),i("strong",[r._v("核心中间层概念的标准化")]),r._v("，但是在实际中并没有获得绝对的成功，因为"),i("strong",[r._v("开发效率")]),r._v("、开发难度和实际的性能都令人失望。")]),r._v(" "),i("p",[i("strong",[r._v("Spring 的一个最大的目的就是使得 Java EE 开发更加容易。")]),r._v(" 同时，Spring 之所以与 Struts、Hibernate 等单层框架不同，是因为 Spring 致力于提供一个以统一的、高效的方式构建整个应用，并且可以将单层框架以最佳的组合糅合在一起建立一个连贯的体系。可以说 Spring 是一个提供了更加完善开发环境的框架，可以为 POJO 对象提供企业级的服务。")]),r._v(" "),i("h3",{attrs:{id:"spring-的特性和优势"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#spring-的特性和优势"}},[r._v("#")]),r._v(" Spring 的特性和优势")]),r._v(" "),i("p",[r._v("从 Spring 框架的特性来看：")]),r._v(" "),i("ul",[i("li",[r._v("非侵入式：基于 Spring 开发的应用中的对象可以不依赖于 Spring 的 API；")]),r._v(" "),i("li",[r._v("控制反转：IOC —— Inversion of Control，指的是将对象的创建权交给 Spring 去创建。使用 Spring 之前，对象的创建都是由我们自己在代码中 new 创建，使用 Spring 之后，对象的创建都是交给了 Spring 框架；")]),r._v(" "),i("li",[r._v("依赖注入：DI —— Dependency Injection，是指依赖的对象不需要手动调用 setXX 方法去设置，而是通过配置赋值。")]),r._v(" "),i("li",[r._v("面向切面编程：Aspect Oriented Programming —— AOP；")]),r._v(" "),i("li",[r._v("容器：Spring 是一个容器，因为它包含并管理应用对象的生命周期；")]),r._v(" "),i("li",[r._v("组件化：Spring 实现了使用简单的组件配置组合成一个复杂的应用。在 Spring 中可以使用 XML 和 Java 注解组合这些对象；")]),r._v(" "),i("li",[r._v("一站式：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方类库（实际上 Spring 自身也提供了表现层的 SpringMVC 和持久层的 Spring JDBC）")])]),r._v(" "),i("p",[r._v("从使用 Spring 框架的好处看：")]),r._v(" "),i("ul",[i("li",[r._v("Spring 可以使开发人员使用 POJOs 开发企业级的应用程序。只使用 POJOs 的好处是你不需要一个 EJB 容器产品，比如一个应用程序服务器，但是你可以选择使用一个健壮的 servlet 容器，比如 Tomcat 或者一些商业产品；")]),r._v(" "),i("li",[r._v("Spring 不会让你白费力气做重复工作，它真正的利用了一些现有的技术，像 ORM 框架、日志框架、JEE、Quartz 和 JDK 计时器。其他视图技术；")]),r._v(" "),i("li",[r._v("Spring 提供了一致的事务管理接口，可向下扩展到（使用一个单一的数据库，例如）本地事务并扩展到全局事务（例如，使用 JTA）。")])]),r._v(" "),i("h2",{attrs:{id:"spring-有哪些组件"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#spring-有哪些组件"}},[r._v("#")]),r._v(" Spring 有哪些组件？")]),r._v(" "),i("p",[r._v("下图来自，"),i("a",{attrs:{href:"https://docs.spring.io/spring-framework/docs/5.0.0.M4/spring-framework-reference/pdf/spring-framework-reference.pdf",target:"_blank",rel:"noopener noreferrer"}},[r._v("官方文档"),i("OutboundLink")],1),r._v("；需要注意的是，虽然这个图来源于 Spring Framwork5.0 M4 版本，但是它依然是V4版本的图，比如 Spring 5 版本中的 web 模块已经去掉了 Portlet 模块，新增了 WebFlux 模块等。")]),r._v(" "),i("p",[i("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Willis-zzx/PicGO/img/202203281457096.png",alt:""}})]),r._v(" "),i("h3",{attrs:{id:"core-container"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#core-container"}},[r._v("#")]),r._v(" Core Container")]),r._v(" "),i("p",[r._v("Spring 的核心容器是其他模块建立的基础，由 Beans 模块、Core 核心模块、Context 上下文模块和 SpEL 表达式语言模块组成，没有这些核心容器，也不可能有 AOP、Web 等上层的功能。具体介绍如下：")]),r._v(" "),i("ul",[i("li",[r._v("Beans 模块：提供了框架的基础部分，包括控制反转和依赖注入；")]),r._v(" "),i("li",[r._v("Core 核心模块：封装了 Spring 框架的底层部分，包括资源访问、类型转换以及一些常用工具类；")]),r._v(" "),i("li",[r._v("Context 上下文模块：建立在 Core 和 Beans 模块的基础之上，集成 Beans 模块功能并添加资源绑定、数据验证、国际化、Java EE 支持、容器生命周期、事件传播等。ApplicationContext 接口是上下文模块的焦点；")]),r._v(" "),i("li",[r._v("SpEL 模块：提供了强大的表达式语言支持，支持访问和修改属性值，方法调用，支持访问及修改数组、容器和索引器，命名变量，支持算数好逻辑运算，支持从 Spring 容器获取 Bean，它也支持列表投影、选择和一般的列表聚合等。")])]),r._v(" "),i("p",[i("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Willis-zzx/PicGO/img/202203281534936.png",alt:"源码模块"}})]),r._v(" "),i("h3",{attrs:{id:"data-access-integration-数据访问-集成"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#data-access-integration-数据访问-集成"}},[r._v("#")]),r._v(" Data Access/Integration（数据访问/集成）")]),r._v(" "),i("p",[r._v("数据访问/集成层包括 JDBC、ORM、OXM、JMS 和 Transactions 模块。")]),r._v(" "),i("ul",[i("li",[r._v("JDBC 模块：提供了一个 JDBC 的样例模板，使用这些模板能消除传统冗长的 JDBC 编码还有必须的事务控制，而且能享受到 Spring 管理事务的好处。")]),r._v(" "),i("li",[r._v("ORM 模块：提供与流行的“对象-关系”映射框架无缝集成的 API，包括 JPA、JDO、Hibernate 和 MyBatis 等。而且还可以使用 Spring 事务管理，无需额外控制事务。")]),r._v(" "),i("li",[r._v("OXM 模块：提供了一个支持 Object/XML 映射的抽象层实现，如 JAXB、Castor、XMLBeans、JiBX 和 XStream。将 Java 对象映射成 XML 数据，或者将 XML 数据映射成 Java 对象。")]),r._v(" "),i("li",[r._v("JMS 模块：指 Java 消息服务，提供一套 “消息生产者、消息消费者” 模板用于更加简单的使用 JMS，JMS 用于在两个应用程序之间，或分布式系统中发生消息，进行异步通信。")]),r._v(" "),i("li",[r._v("Transactions 事务模块：支持编程和声明式事务管理。")])]),r._v(" "),i("p",[i("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Willis-zzx/PicGO/img/202203281625551.png",alt:""}})]),r._v(" "),i("h3",{attrs:{id:"web-模块"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#web-模块"}},[r._v("#")]),r._v(" Web 模块")]),r._v(" "),i("p",[r._v("Spring 的 Web 层包括 Web、Servlet、WebSocket 和 Webflux 组件。")]),r._v(" "),i("ul",[i("li",[r._v("Web 模块：提供了基本的 Web 开发集成特性，例如多文件上传功能、使用 Servlet 监听器的 IOC 容器初始化以及 Web 应用上下文。")]),r._v(" "),i("li",[r._v("Servlet 模块：提供了一个 Spring MVC Web 框架实现。Spring MVC 框架提供了基于注解的请求资源注入、更简单的数据绑定、数据验证等及一套非常易用的 JSP 标签，完全无缝与 Spring 其他技术协作。")]),r._v(" "),i("li",[r._v("WebSocket 模块：提供了简单的接口，用户只要实现响应的接口就可以快速的搭建 WebSocket Server，从而实现双向通讯。")]),r._v(" "),i("li",[r._v("Webflux 模块： Spring WebFlux 是 Spring Framework 5.x 中引入的新的响应式web框架。与 Spring MVC 不同，它不需要 Servlet API，是完全异步且非阻塞的，并且通过 Reactor 项目实现了 Reactive Streams 规范。Spring WebFlux 用于创建基于事件循环执行模型的完全异步且非阻塞的应用程序。")]),r._v(" "),i("li",[r._v("Portlet 模块：提供了在 Portlet 环境中使用 MVC 实现，类似 Web-Servlet 模块的功能。（在Spring 5.x中已经移除）")])]),r._v(" "),i("p",[i("img",{attrs:{src:"https://cdn.jsdelivr.net/gh/Willis-zzx/PicGO/img/202203281642182.png",alt:""}})]),r._v(" "),i("h3",{attrs:{id:"aop、aspects、instrumentation-和-messaging"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#aop、aspects、instrumentation-和-messaging"}},[r._v("#")]),r._v(" AOP、Aspects、Instrumentation 和 Messaging")]),r._v(" "),i("p",[r._v("在 Core Container 之上是 AOP、Aspects 等模块。")]),r._v(" "),i("ul",[i("li",[r._v("AOP 模块：提供了面向切面编程实现，提供比如日志记录、权限控制、性能统计等通用功能和业务逻辑分离的技术，并且能动态的把这些功能添加到需要的代码中，这样各司其职，降低业务逻辑和通用功能的耦合。")]),r._v(" "),i("li",[r._v("Aspects 模块：提供与 AspectJ 的集成，是一个功能强大且成熟的面向切面编程（AOP）框架。")]),r._v(" "),i("li",[r._v("Instrumentation 模块：提供了类工具的支持和类加载器的实现，可以在特定的应用服务器中使用。")]),r._v(" "),i("li",[r._v("messaging 模块：Spring 4.0 以后新增了消息（Spring-messaging）模块，该模块提供了对消息传递体系结构和协议的支持。")]),r._v(" "),i("li",[r._v("jcl 模块： Spring 5.x中新增了日志框架集成的模块。")])])])}),[],!1,null,null,null);t.default=n.exports}}]);